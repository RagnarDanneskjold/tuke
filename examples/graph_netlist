#!/usr/bin/python
# vim: tabstop=4 expandtab shiftwidth=4 fileencoding=utf8
# ### BOILERPLATE ###
# Tuke - Electrical Design Automation toolset
# Copyright (C) 2008 Peter Todd <pete@petertodd.org>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ### BOILERPLATE ###


"""
Generates a Netlist graph using pydot

Usage:

graph_netlist < foo.xml > foo.dot
"""

from Tuke import Id,rndId,load_element_from_file
from Tuke.sch import Component,Pin
import sys
import pydot


sch = load_element_from_file(sys.stdin)


def graph_sch(self,base = Id()):
    """Recursive grapher
    
    self - element
    base - Id prefix
    """

    pins = []
    subs = []
    for e in self.subs:
        if isinstance(e,Pin):
            pins.append(e)
        elif isinstance(e,Component):
            subs.append(e)

    # Represent the whole component as a subgraph
    g = pydot.Subgraph('"cluster_%s"' % str(base))
    g.label = str(base[-1])

    # Create a Mrecord Node to hold the pins, if there are any
    if pins:
        n = pydot.Node('"%s"' % str(base))

        # Add each pin as a port
        l = '|'.join(
                ['<%s> %s' % (p.id,p.id) for p in pins])

        n.label = '%s' % l
        n.shape = 'record'

        g.add_node(n)


    # Generate edges from the netlist 
    for edges in self.netlist.itervalues():
        # Pins are being implemented as graphviz ports, so we need to seperate
        # the last part of each Id
        def id_to_node_port(i):
            id_elements = str(i).split('/')
            port = id_elements.pop()
            node = '/'.join(id_elements)

            return '%s:%s' % (node,port)

        edges = list(edges)

        # If there are more than 2 nodes in edges we need to pick a central
        # junction. The sorted just keeps things hierarchial, although, dot
        # seems to ignores it and connects things as it wishes.
        edges = sorted(edges)
        junction = None
        if len(edges) > 2 and None:
            # DISABLED: It'd be nice to have a central floating point for this,
            # but it doesn't seem possible, the point sits on a known subgraph
            # and looks bad.

            # Make a floating junction node to connect everything too
            junction = pydot.Node(str(rndId()))
            junction.shape = 'point'
            g.add_node(junction)
            junction = junction.name
        else:
            a = edges.pop()
            junction = id_to_node_port(base + a)

        for e in edges:
            e = id_to_node_port(base + e)
            e = pydot.Edge(junction,e)

            g.add_edge(e) 

    for s in subs:
        g.add_subgraph(graph_sch(s,base + s.id))

    return g 




g = pydot.Dot()
g.graph_type = 'graph' # circuits only make sense as undirectional graphs

g.add_subgraph(graph_sch(sch,base = sch.id))

print g.to_string()
