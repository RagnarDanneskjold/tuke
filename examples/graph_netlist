#!/usr/bin/python
# vim: tabstop=4 expandtab shiftwidth=4 fileencoding=utf8
# ### BOILERPLATE ###
# Tuke - Electrical Design Automation toolset
# Copyright (C) 2008 Peter Todd <pete@petertodd.org>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ### BOILERPLATE ###


"""
Generates a Netlist graph using pydot

Usage:

graph_netlist foo.png < foo.xml
"""

from Tuke import Id,rndId,load_element_from_file
from Tuke.sch import Component,Pin
import sys


sch = load_element_from_file(sys.stdin)


def graph_sch(self,base = Id()):
    """Recursive grapher
    
    self - element
    base - Id prefix
    """

    pins = []
    subs = []
    for e in self.subs:
        if isinstance(e,Pin):
            pins.append(e)
        elif isinstance(e,Component):
            subs.append(e)

    # Turn netlist entries into edges for pydot
    edges = []
    for edge in self.netlist.itervalues():
        edges.append([base + str(i) for i in tuple(edge)])

    for s in subs:
        edges += graph_sch(s,base + s.id)
    return edges



import pydot

edges = graph_sch(sch,base = sch.id)

g = pydot.graph_from_edges(edges)

g.write_png(sys.argv[1])
