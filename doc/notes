Layers need to be fast, very, very fast, if transforms are to be layer
specific. This is needed if the schematic and pcb views are to be within the
same hiarchy. To achieve this, layers should be a type of tuple, with interned
strings as the tuple parts. Transformations then become a tree, first with any
transformations applicable to all layers, then applicable to, say, pcb.* or
sch.*, then drilling down from there. The key is to make sure that comparisons
are always identity based for speed, hence the interned strings. Fortunately
Python seems to always intern string literals.

Having said that, are transformations for a level below (or above) that even
worthwhile?  What's the use case? Fastest would be transforms based purely on
one level.

Note that this is seperate from exchanging layers, another type of transform.
In this scheme layers could be exchanged, but geometry transformations would
exclusively apply to either 'pcb.*' or 'sch.*' Similarly exchanging layers
could only be done on a 'pcb.foo.*' to 'pcb.bar.*' basis.


Create a Tuke._tuke module, with all the hand-coded C-extensions in it. Moving
Tuke.context._context to Tuke._tuke.context


http://www.liquidpcb.org
http:/cbold.com <- kinda like tuke, but doesn't do the physical side of things

http://docutils.sourceforge.net/docutils/statemachine.py
-we should do things like this, Tuke is for developers!

http://dirtsimple.org/2004/11/stream-of-consciousness-testing.html
-also, links to the above and talks about testing

http://opensource.franz.com/preamble.html
-licensing issues with lisp and the lgpl

http://www.python.org/workshops/1997-10/proceedings/zukowski.html
-Implementing a Selective Undo Framework in Python
- could be useful later

cypthon <- "python" compiled to c

some quick ideas:


programmable heavy symbol generator


make embedded symbols/footprints be default, with uuid? sha1?

note licencing of symbols/footprints for above usage


think about usage of multi-slot parts, should be easy to assign slots to parent parts, as well as move them around


pcb ui should allow parts to be temp placed off board

tooltips


remove concept of "Vcc solder" etc. replace with configurable Vcc/GND connected net colors


need physical keepouts, electrical keepouts, top.solder.keepout? top.phys.keepout?

IPC-7351 - the big spec for smd stuff



Layer ideas:

layer.type

layer - Physically/Logically seperate. Differently named layers must not affect
each other in any way. top is independent of bottom

type - Sub types in the same physical space.


*.drill - drill layer, present in all layers at once
top.drill - drill through top layer only
(top|middle).drill - drill through top and middle only


Translate/Rotate/LayerSwap -> Transform

pin connection syntax:

link(p1,p2)

cut(p1,p2)


need to have a Bus Component, with named pins for various lines in the bus:

i2c = Bus() # or even, i2c_Bus()

self.link(i2c.scl,obj.scl)
self.link(i2c.sda,obj.sda)

can we extend link to link busses?

self.link(i2c,obj.i2c)
self.link(pwr,obj.pwr)

What about having sub objects, in subs, be allowed to be a accessed via .obj
where obj is the sub-objects Id? Then pin's and busses could be completely
generalized, with the bus being a collection of pins.

link could be setup so that only like stuff can be linked, with the link
objects handling the link ability. Of course you can always link up the
individual pins manually.

To handle net attributes link should have an optional third arg, attrib, which
normally is simply copied from first to second. (or maybe more restrictive to
less) Or just error if net types are different. They could simply be
implemented by sub-classing Pin


Multi-part components like op-amps can be treated like busses:

opamp.slota.in
opamp.slota.out
opamp.slotb.in

Need to be able to exchange slots as well. Maybe a MultiSlot class, with a
seperate Slot class, and play games with the connectivity, or heck, even just
do delete/rename/recreate's when you want to exchage two slots.


For debugging Elements should include a reference to what source code file
instanciated them.
